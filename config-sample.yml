packages:
  - server
  - vanilla
  - technic

server:
  builder: "vanilla"

vanilla:
  builder: "vanilla"

technic:
  builder: "technic"


# You can set per-package type configurations like this
server:
  host: "mc-server.example.com"
  dir: "/path/to/server"

# Or, if you have the same configurations for multiple package types,
# You can use YAML references like this:
package_defaults: &PKG_DEFAULTS
  # Hostname to upload the package file to.
  host: "fileserver.example.com"
  # Directory to upload the package file to on the remote host.
  dir: "/path/to/pack/directory"

# Y
vanilla:
  <<: *PKG_DEFAULTS

# The list of modpacks and path to find them
modpacks:
  first: "/path/to/my-first-pack"
  second: "relative/path/to/second/pack"



# A list of the packages to generate.
# You can override this with your own list if you want to to remove some
# of these packages.
packages:
  - server
  - vanilla
  - technic


# Configurations specific to server packages.
server:
  dirs:
    - common
    - server


client_default: &CLIENT_DEFAULT
  dirs:
    - common
    - client

# Configuration Specific to vanilla minecraft packages.
vanilla:
  <<: *CLIENT_DEFAULT

# Configurations specific to technic platform packages.
technic:
  <<: *CLIENT_DEFAULT
  # The version of forge to include.
  forge_version: "1.7.10-10.13.1.1217"
  # The path/filename the forge jar should be in the packaged zip file.
  forge_packagedName: "bin/modpack.jar"


server:
  builder: "vanilla"
  vanilla:
    directories:
      - common
      - server
  deployers:
    - github
    - ssh
  ssh:
    host: "hostname"
    directory: "/path"

technic:
  builder: "technic"
  technic:
    directories:
      - common
      - client
  deployers:
    - github
